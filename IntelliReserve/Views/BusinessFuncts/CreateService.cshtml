@model IntelliReserve.Models.ViewModels.CreateServiceViewModel

@{
    ViewData["Title"] = "Create Service";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f9f9f9;
        color: #333;
        padding-top: 80px;
    }
    .navbar-custom {
        background-color: #fff9db;
        padding: 1rem 2rem;
        border-bottom: 1px solid #ddd;
        width: 100%;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
    }

    .navbar-brand {
        font-weight: 700;
        font-size: 1.5rem;
        color: #333;
    }

        .navbar-brand i {
            color: #f9c10b;
            margin-right: 0.5rem;
        }

    .nav-link {
        color: #333 !important;
        font-weight: 500;
        margin-left: 1rem;
    }

</style>

<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-custom">
    <a class="navbar-brand" href="#"><i class="bi bi-star-fill"></i> IntelliReserve</a>
    <div class="ms-auto d-flex align-items-center">
        <ul class="navbar-nav me-3">
            <li class="nav-item"><a class="nav-link active" href="home-business">Home</a></li>
            <li class="nav-item"><a class="nav-link" href="#">My Schedule</a></li>

            <a class="nav-link" asp-controller="Business" asp-action="ProfileBusiness">My Account</a>
        </ul>
        <i class="bi bi-building fs-3"></i>

        <!-- Logout Button -->
        <form method="post" action="@Url.Action("Logout", "User")" class="ms-3">
            <button type="submit" class="btn btn-outline-danger">
                <i class="bi bi-box-arrow-right"></i> Logout
            </button>
        </form>
    </div>
</nav>



<div class="container">
   

    <div class="section-title">Create New Service</div>

    <div class="form-section">
        <form asp-action="Create" method="post">
            <div class="mb-3">
                <label asp-for="Name" class="form-label">Service Name</label>
                <input asp-for="Name" class="form-control" required />
            </div>

            <div class="mb-3">
                <label asp-for="Duration" class="form-label">Duration (minutes)</label>
                <input asp-for="Duration" type="number" min="1" class="form-control" required />
            </div>

            <div class="mb-3">
                <label asp-for="Price" class="form-label">Price (€)</label>
                <input asp-for="Price" type="number" step="0.01" min="0" class="form-control" required />
            </div>

            <div class="mb-3">
                <label class="form-label">Select Days</label>
                <div>
                    @foreach (var day in Enum.GetNames(typeof(DayOfWeek)))
                    {
                        <input type="checkbox" name="AvailableDays" value="@day" /> @day
                    }
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Time Range</label>
                <div class="row">
                    <div class="col-md-6">
                        <input asp-for="AvailableFrom" type="time" class="form-control" required />
                    </div>
                    <div class="col-md-6">
                        <input asp-for="AvailableTo" type="time" class="form-control" required />
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="StartDate" class="form-label">Start Date</label>
                <input asp-for="StartDate" type="date" class="form-control" required />
            </div>

            <div class="mb-3">
                <label asp-for="EndDate" class="form-label">End Date</label>
                <input asp-for="EndDate" type="date" class="form-control" required />
            </div>

            <div class="d-flex align-items-center gap-2 mb-3">
                <button type="button" class="btn btn-outline-primary" onclick="generateSchedules()">Generate Schedules</button>

                <button class="btn btn-outline-secondary d-flex align-items-center justify-content-center p-2" type="button"
                        data-bs-toggle="collapse" data-bs-target="#scheduleCollapse" aria-expanded="false" aria-controls="scheduleCollapse"
                        style="width: 40px; height: 40px;">
                    <span id="toggle-icon" style="font-size: 1.2rem;">▼</span>
                </button>
            </div>

            <div id="scheduleCollapse" class="collapse">
                <h5 class="mt-4">Service Schedules</h5>
                <div id="schedules-container" class="schedules-container"></div>
            </div>

            <div class="mt-4">
                <button type="submit" class="btn btn-success">Create Service</button>
                <a asp-action="Index" class="btn btn-secondary ms-2">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        function generateSchedules() {
            const duration = parseInt(document.getElementById('Duration').value);
            const startTime = document.getElementById('AvailableFrom').value;
            const endTime = document.getElementById('AvailableTo').value;

            const selectedDays = Array.from(document.querySelectorAll('input[name="AvailableDays"]:checked'))
                .map(checkbox => checkbox.value);

            const startDate = document.getElementById('StartDate').value;
            const endDate = document.getElementById('EndDate').value;

            if (selectedDays.length === 0 || !startTime || !endTime || isNaN(duration)) {
                alert('Please select days, set a valid time range, duration, and start/end dates.');
                return;
            }

            const schedulesContainer = document.getElementById('schedules-container');
            schedulesContainer.innerHTML = '';

            document.getElementById("scheduleCollapse").classList.add("show");
            document.getElementById("toggle-icon").textContent = '▲';

            const [startHour, startMinute] = startTime.split(':').map(Number);
            const [endHour, endMinute] = endTime.split(':').map(Number);

            const startDateObj = new Date(startDate);
            const endDateObj = new Date(endDate);

            let scheduleIndex = 0;

            selectedDays.forEach(day => {
                let currentDate = new Date(startDateObj);

                while (currentDate <= endDateObj) {
                    if (currentDate.getDay() === getDayOfWeek(day)) {
                        let currentHour = startHour;
                        let currentMinute = startMinute;

                        while (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute)) {
                            const year = currentDate.getFullYear();
                            const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
                            const dayOfMonth = currentDate.getDate().toString().padStart(2, '0');
                            const hourStr = currentHour.toString().padStart(2, '0');
                            const minuteStr = currentMinute.toString().padStart(2, '0');

                            const startDateTimeISO = `${year}-${month}-${dayOfMonth}T${hourStr}:${minuteStr}`;

                            const endDateTimeObj = new Date(`${startDateTimeISO}`);
                            endDateTimeObj.setMinutes(endDateTimeObj.getMinutes() + duration);
                            const endHourStr = endDateTimeObj.getHours().toString().padStart(2, '0');
                            const endMinuteStr = endDateTimeObj.getMinutes().toString().padStart(2, '0');
                            const endDateTimeISO = `${year}-${month}-${dayOfMonth}T${endHourStr}:${endMinuteStr}`;

                            const scheduleEntry = document.createElement('div');
                            scheduleEntry.classList.add('schedule-entry', 'mb-3', 'border', 'p-2');
                            scheduleEntry.innerHTML = `
                                <div class="row align-items-center">
                                    <div class="col-10">
                                        <strong>Schedule ${scheduleIndex + 1}:</strong>
                                        <p><b>Day:</b> ${day} | <b>Start:</b> ${startDateTimeISO} | <b>End:</b> ${endDateTimeISO}</p>
                                        <input type="hidden" name="Schedules[${scheduleIndex}].StartDateTime" value="${startDateTimeISO}" />
                                        <input type="hidden" name="Schedules[${scheduleIndex}].EndDateTime" value="${endDateTimeISO}" />
                                    </div>
                                    <div class="col-2">
                                        <span class="remove-btn" onclick="removeSchedule(this)">Remove</span>
                                    </div>
                                </div>`;

                            schedulesContainer.appendChild(scheduleEntry);
                            scheduleIndex++;

                            currentMinute += duration;
                            if (currentMinute >= 60) {
                                currentMinute -= 60;
                                currentHour += 1;
                            }
                        }
                    }
                    currentDate.setDate(currentDate.getDate() + 1);
                }
            });
        }

        function getDayOfWeek(day) {
            const daysOfWeek = {
                "Sunday": 0,
                "Monday": 1,
                "Tuesday": 2,
                "Wednesday": 3,
                "Thursday": 4,
                "Friday": 5,
                "Saturday": 6
            };
            return daysOfWeek[day] ?? -1;
        }

        function removeSchedule(button) {
            const scheduleEntry = button.closest('.schedule-entry');
            scheduleEntry.remove();
        }
    </script>
}
